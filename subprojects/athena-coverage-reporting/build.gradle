/*
 * MIT License
 *
 * Copyright (c) 2020 Arun Patra
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import java.util.stream.Collectors

plugins {
    id 'base'
    id 'java'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.10.1'
}

def jacocoProjects = rootProject.subprojects.stream().filter {p -> p.plugins.hasPlugin('jacoco')}.collect(Collectors.toSet())

check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    dependsOn 'jacocoRootReport'
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

task jacocoMerge(type: JacocoMerge) {
    jacocoProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn jacocoProjects.test, jacocoMerge
    additionalSourceDirs.from = files(jacocoProjects.sourceSets.main.allSource.srcDirs).filter { f -> f.exists() }
    sourceDirectories.from = files(jacocoProjects.sourceSets.main.allSource.srcDirs).filter { f -> f.exists() }
    classDirectories.from = files(jacocoProjects.sourceSets.main.output).filter { f -> f.exists() }.files.collect {
        fileTree(
                dir: it,
                exclude: [
                        '**/org/athena/junk/**/*',
                        '**/org/athena/api/queries/**/*'
                ]
        )
    }
    executionData jacocoMerge.destinationFile
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

coveralls {
    sourceDirs = jacocoProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
}
//tasks.build.dependsOn(tasks.generateThingverseCoverageReport)